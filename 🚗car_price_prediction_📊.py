# -*- coding: utf-8 -*-
"""🚗Car price Prediction 📊

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/car-price-prediction-9faa5fe3-bde3-4392-9870-236ce226b32e.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241004/auto/storage/goog4_request%26X-Goog-Date%3D20241004T173247Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Da3ef04d91364f44ac2ab96afac4d973f12b681ad382cda06c5389e401edc49ee8854fcd16b8b959e4b77f94936756ca463fc2bcfc2f409d13804cba6ab4c3513ec1fd483aaafa497c47451c4be6eeeba66d90be2af6b8afa977f96bfc6d4dd043cc6b0eff4f7a31aad3a11e13f762a8a916c717bfcbecbbfb9a2c3761411e97b837345d7206fb34cf6edaa7fd340d464b5d47149dd6f04aaa66a2d0a087cff459cb63bdea90893563cda1b7763e6701fb60fb4a399a01604a0b9dd704673bdae391365a7bce5ebfc9d04494b5b0573878f2d42a2aade0152e4b070d11a33abcc962074bbc8f839cf204b3cb485330550ca8a62851a7029011e9ad1828f46646d

<a id='top'></a>
<div class="list-group" id="list-tab" role="tablist">
<p style="background-color:#FFaaff;font-family:sans-serif;color:#FFffxx;font-size:250%;text-align:center;border-radius:15px 15px;"> 👨‍💻 Getting Started 😃😃 </p>

<center><img src="https://i.gifer.com/3dof.gif"></center>

<a id='top'></a>
<div class="list-group" id="list-tab" role="tablist">
   <p style="background-color:#FFaaff; font-family: 'Arial', sans-serif; color:#FFffxx; font-size:250%; text-align:center; border-radius:15px 15px;">
        ✨Introduction 😃😃
    </p>
        
   <h3>Problem Statement</h3>
    
   <p style="font-family: 'Segoe UI'; font-size: 20px; line-height: 1.6; color: #333;">
        A Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.
        They have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:
       </p>
      <ul style = "font-family: 'Segoe UI'; font-size: 20px; ">
           <li>Which variables are significant in predicting the price of a car 😃😃😃😃</li>
           <li>How well those variables describe the price of a car 😃😃😃😃</li>
        </ul>
    <p style="font-family: 'Segoe UI'; font-size: 20px; line-height: 1.6; color: #333;">
        Based on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the American market.
        So, put on your seatbelt and get ready for a fun journey. We're about to explore the world of cars, solve mysteries, and have a good laugh along the way! 🚗😃😃😄😃😄</p>
</div>

<a id='top'></a>
<div class="list-group" id="list-tab" role="tablist">
   <p style="background-color:#FFaaff; font-family: sans-serif; color:#FFffxx; font-size:250%; text-align:center; border-radius:15px 15px;">
        Learn About Data
    </p>

   <ul style = "font-family: 'Segoe UI'; font-size: 16px;" >
        <li><strong>CarID:</strong> Identification Number for Each Car</li>
        <li><strong>SafetyRating:</strong> Car's Safety Rating</li>
        <li><strong>CarName:</strong> Name of the Car Model</li>
        <li><strong>FuelType:</strong> Type of Fuel Used (Gasoline, Diesel, Electric, etc.)</li>
        <li><strong>Aspiration:</strong> Type of Aspiration (Standard or Turbocharged)</li>
        <li><strong>NumDoors:</strong> Number of Doors on the Car</li>
        <li><strong>BodyStyle:</strong> Style of the Car's Body (Sedan, Coupe, SUV, etc.)</li>
        <li><strong>DriveWheelType:</strong> Type of Drive Wheels (Front, Rear, All)</li>
        <li><strong>EngineLocation:</strong> Location of the Car's Engine (Front or Rear)</li>
        <li><strong>Wheelbase:</strong> Length of the Car's Wheelbase</li>
        <li><strong>CarLength:</strong> Overall Length of the Car</li>
        <li><strong>CarWidth:</strong> Width of the Car</li>
        <li><strong>CarHeight:</strong> Height of the Car</li>
        <li><strong>CurbWeight:</strong> Weight of the Car without Passengers or Cargo</li>
        <li><strong>EngineType:</strong> Type of Engine (Gas, Diesel, Electric, etc.)</li>
        <li><strong>NumCylinders:</strong> Number of Cylinders in the Engine</li>
        <li><strong>EngineSize:</strong> Size of the Car's Engine</li>
        <li><strong>FuelSystem:</strong> Type of Fuel Delivery System</li>
        <li><strong>BoreRatio:</strong> Bore-to-Stroke Ratio of the Engine</li>
        <li><strong>Stroke:</strong> Stroke Length of the Engine</li>
        <li><strong>CompressionRatio:</strong> Compression Ratio of the Engine</li>
        <li><strong>Horsepower:</strong> Car's Engine Horsepower</li>
        <li><strong>PeakRPM:</strong> Engine's Peak RPM (Revolutions Per Minute)</li>
        <li><strong>CityMPG:</strong> Miles Per Gallon (MPG) in City Driving</li>
        <li><strong>HighwayMPG:</strong> MPG on the Highway</li>
        <li><strong>CarPrice:</strong> Price of the Car</li>
    </ul>
</div>

<a id='top'></a>
<div class="list-group" id="list-tab" role="tablist">
   <p style="background-color:#FFaaff; font-family: sans-serif; color:#FFffxx; font-size:250%; text-align:center; border-radius:15px 15px;">
        Life Cycle of Machine Learning Project
    </p>

   <ul style="font-size: 18px; font-family: 'Segoe UI';">
        <li><strong>Understanding the Problem Statement</strong></li>
        <li><strong>Data Checks to Perform</strong></li>
        <li><strong>Exploratory Data Analysis</strong></li>
        <li><strong>Data Pre-Processing</strong></li>
        <li><strong>Model Training</strong></li>
        <li><strong>Choose Best Model</strong></li>
    </ul>
</div>

# <div style="color:blue;display:inline-block;border-radius:5px;background-color:#F0E68C;font-family:Nexa;overflow:hidden"><p style="padding:15px;color:blue;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0; width:750px;"><b> 1) Problem Statement</b>  </p></div>

<p style=" font-family: 'Segoe UI'; font-size: 20px; letter-spacing: 0.5px; margin-bottom: 20px;">
     Predicting the price of cars based on a wide range of attributes and features. Using a dataset containing car details such as safety ratings, dimensions, engine specifications, and more, we aim to develop a machine learning model that accurately estimates the price of different car models.
</p>

# <div style="color:blue;display:inline-block;border-radius:5px;background-color:#F0E68C;font-family:Nexa;overflow:hidden"><p style="padding:15px;color:blue;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0; width:750px;"><b>1.1) Import Modules </b>  </p></div>
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

import warnings
warnings.filterwarnings('ignore')

pd.set_option('display.max_rows', None)  # Display all rows
pd.set_option('display.max_colwidth', None)  # Display full width of each column
pd.set_option('display.width', None) #prevent line wrapping
# Set display options to show all columns
pd.set_option('display.max_columns', None)  # None means show all columns

df = pd.read_csv('/content/CarPrice_Assignment.csv')

"""# <div style="color: blue; display:inline-block; border-radius: 5px; background-color: #F0E68C; font-family: 'Nexa', sans-serif; overflow: hidden;"><p style="padding: 15px; color: blue; overflow: hidden; font-size: 100%; letter-spacing: 0.5px; margin: 0; width: 750px;"><b>2) Data Checks to Perform</b></div>

  <ul style = " font-family: 'Segoe UI'; font-size: 20px;">
            <li>Check Missing values</li>
            <li>Check Duplicates</li>
            <li>Check data type</li>
            <li>Check the number of unique values of each column</li>
            <li>Check statistics of the dataset</li>
            <li>Check various categories present in the different categorical columns</li>
        </ul>
    </p>


"""

# check Missing value
df.isnull().sum()

"""> **NO MISSING VALUE IS AVALIABLE**"""

# Check Duplication
df.duplicated().sum()

"""> **NO DUPLICATON**"""

#Check datatype
df.dtypes

df.head()

# Check the number of unique values of each column
df.nunique()
df.head()

#Check statistics of data set
df.describe()

"""# <h1>Insights from Statistics:</h1>

<ol style = "font-family: 'Segoe UI'; font-size: 20px; ">
   <li>
        <strong>Car Variety 🚗🚙:</strong>
        <ul>
            <li>Dataset covers 205 car models, each unique in attributes.</li>
            <li>Sizes, weights, and engine capacities vary across cars.</li>
        </ul>
    </li>
    
   <li>
        <strong>Price Range 💰:</strong>
        <ul>
            <li>Mini Price: 5,118 dollar</li>
            <li>Maxi Price: 45,400 dollar</li>
            <li>Average car price is about $13,276.</li>
        </ul>
   </li>
   <li>
        <strong>Engine Diversity 🛠️:</strong>
        <ul>
            <li>Engines differ in bore diameter (<code>boreratio</code>) and stroke length (<code>stroke</code>).</li>
            <li>Risk ratings (<code>symboling</code>) vary from -2 to 3.</li>
        </ul>
    </li>
<li>
        <strong>Data Distribution 📊:</strong>
        <ul>
            <li>Features like <code>carwidth</code>, <code>curbweight</code>, <code>enginesize</code> show notable variability.</li>
            <li>Potential outliers present in <code>compressionratio</code> and <code>horsepower</code>.</li>
        </ul>
    </li>
</ol>

"""

categorical_columns = ['fueltype','aspiration','doornumber','carbody','drivewheel','enginelocation','enginetype',
    'cylindernumber',
    'fuelsystem'
]

for col in categorical_columns:

    print(f"Category in {col} is : {df[col].unique()}")

"""# <div style="color:blue;display:inline-block;border-radius:5px;background-color:#F0E68C;font-family:Nexa;overflow:hidden"><p style="padding:15px;color:blue;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0; width:750px;"><b> </b> 3) Exploratory data analysis </p></div>"""

# Distribution of Numerical Features
numerical_features = ['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight',
                      'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower',
                      'peakrpm', 'citympg', 'highwaympg', 'price']

plt.figure(figsize=(12, 8))
for feature in numerical_features:
    plt.subplot(3, 5, numerical_features.index(feature) + 1)
    sns.histplot(data=df[feature], bins=20, kde=True)
    plt.title(feature)
plt.tight_layout()
plt.show()

# Price Analysis
plt.figure(figsize=(8, 6))
sns.histplot(data=df['price'], bins=20, kde=True)
plt.title('Distribution of Price')
plt.show()

# Define the list of categorical columns to analyze
categorical_columns = ['fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel',
                       'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem']

# Create subplots
fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 9))
axes = axes.ravel()  # Flatten the 2D array of axes

# Loop through each categorical column
for i, column in enumerate(categorical_columns):
    sns.countplot(x=df[column], data=df, palette='bright', ax=axes[i], saturation=0.95)
    for container in axes[i].containers:
        axes[i].bar_label(container, color='black', size=10)
    axes[i].set_title(f'Count Plot of {column.capitalize()}')
    axes[i].set_xlabel(column.capitalize())
    axes[i].set_ylabel('Count')

# Adjust layout and show plots
plt.tight_layout()
plt.show()

n = 20  # Number of top car models to plot
top_car_models = df['CarName'].value_counts().head(n)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_car_models.values, y=top_car_models.index)
plt.title(f'Top {n} Car Models by Frequency')
plt.xlabel('Frequency')
plt.ylabel('Car Model')
plt.tight_layout()
plt.show()

# Calculate average price for each car model
avg_prices_by_car = df.groupby('CarName')['price'].mean().sort_values(ascending=False)

# Plot top N car models by average price
n = 20  # Number of top car models to plot
top_car_models = avg_prices_by_car.head(n)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_car_models.values, y=top_car_models.index)
plt.title(f'Top {n} Car Models by Average Price')
plt.xlabel('Average Price')
plt.ylabel('Car Model')
plt.tight_layout()
plt.show()

# Categorical Feature vs. Price
plt.figure(figsize=(12, 8))
for feature in categorical_columns:
    plt.subplot(3, 3, categorical_columns.index(feature) + 1)
    sns.boxplot(data=df, x=feature, y='price')
    plt.title(f'{feature} vs. Price')
plt.tight_layout()
plt.show()

# Correlation Analysis
correlation_matrix = df[numerical_features].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

"""<a id='top'></a>
<div class="list-group" id="list-tab" role="tablist">
<p style="background-color:#FFaaff;font-family:sans-serif;color:#FFffxx;font-size:250%;text-align:center;border-radius:15px 15px;"> Analysis Results 📊🔍 </p>

- We have DataSet > Car Price 👍
- The Shape DataSet = (Rows = 205, columns = 26) 👊

- No null value 🚫📛
- No Duplicated value 🚫🔁

### Some Analyst 👀👀

#### Price cars 💰💥
- Avg price = $13,276 💵

- Min price = $5,118 💲

- Max price = $45,400 💲💲

#### The famous or repeats car > Toyota 🚗😊😊
- Most using car working in Gas around 90% and the average price less than the car working in Diesel. 😨😨
- some category using the car working in Diesel around 10%, but the average price is more than the car working on Gas. 💥💥

- Most cars stand around 82%, also the average price less for Turbo, with turbo cars comprising around 18%. 😪😪

- Approximately 56% of users drive cars with 4 doors, while 46% drive cars with 2 doors; sports cars maintain a similar average price. 👍👍

- Most people prefer the Sedan car type, while higher-priced types like Convertible and Hardtop are also popular choices. 👍👍

- Majority of users opt for [Front-Wheel Drive (fwd)]> for their cars, possibly due to its lower price.

- The most common engine type is "ohc," correlating with lower prices.

### When increasing the number of cylinders, the price tends to increase, though the majority of users stick with 4 cylinders.

### As the engine size increases, so does the price.

### The wheelbase, car length, and car width have an effect on the price, but the car height doesn't seem to have any significant impact. 😨😨

# <div style="color:blue;display:inline-block;border-radius:5px;background-color:#F0E68C;font-family:Nexa;overflow:hidden"><p style="padding:15px;color:blue;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0; width:750px;"><b> </b> 4) Data Pre-Processing </p></div>
"""

# Extract brand and model from CarName
df['brand'] = df['CarName'].apply(lambda x: x.split(' ')[0])
df['model'] = df['CarName'].apply(lambda x: ' '.join(x.split(' ')[1:]))

# Define categorical and numerical columns
categorical_columns = ['fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel',
                       'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem', 'brand', 'model']
numerical_columns = ['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight',
                     'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower',
                     'peakrpm', 'citympg', 'highwaympg']

# Encoding categorical variables
label_encoder = LabelEncoder()
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Feature engineering
df['power_to_weight_ratio'] = df['horsepower'] / df['curbweight']
for column in numerical_columns:
    df[f'{column}_squared'] = df[column] ** 2
df['log_enginesize'] = np.log(df['enginesize'] + 1)

# Feature scaling
scaler = StandardScaler()
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])

# Drop the original 'CarName' column
df.drop('car_ID', axis=1, inplace=True)
df.columns
df.dtypes

"""# <div style="color:blue;display:inline-block;border-radius:5px;background-color:#F0E68C;font-family:Nexa;overflow:hidden"><p style="padding:15px;color:blue;overflow:hidden;font-size:100%;letter-spacing:0.5px;margin:0; width:750px;"><b> </b> 5) Train the Model </p></div>"""

# Splitting the dataset
X = df.drop(['CarName','price'], axis=1)  # Include the engineered features and CarName
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2_square = r2_score(y_test,y_pred)
print(f" R-squared: {r2_square}")
print(f'Mean Squared Error: {mse}')

pred_df=pd.DataFrame({'Actual Value':y_test,'Predicted Value':y_pred,'Difference':y_test-y_pred})
pred_df

import pickle

# Save the model
with open('LinearRegressionModel.pickle', 'wb') as f:
    pickle.dump(model, f)

"""<a id='top'></a>
<div class="list-group" id="list-tab" role="tablist">
<p style="background-color:#FFaaff;font-family:sans-serif;color:#FFffxx;font-size:250%;text-align:center;border-radius:15px 15px;"> Final Result </p>

<img src="https://i.pinimg.com/originals/02/23/6d/02236d14102874f981384ecff2c7f813.gif">
"""