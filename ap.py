# -*- coding: utf-8 -*-
"""Markdown Guide

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/markdown_guide.ipynb
"""
import streamlit as st
import pandas as pd
import pickle
import numpy as np
import sklearn

# Load the trained model
with open('LinearRegressionModel.pickle', 'rb') as f:
    model = pickle.load(f)

# Function to make predictions
def predict_price(features):
    # Convert features to DataFrame
    input_data = pd.DataFrame([features])
    prediction = model.predict(input_data)
    return prediction[0]

# Streamlit app layout
st.title("Car Price Prediction App")

# User inputs for features
symboling = st.number_input("Symboling", value=3)
CarName = st.text_input("Car Name", value="alfa-romero giulia")
fueltype = st.selectbox("Fuel Type", options=[0, 1], format_func=lambda x: "Diesel" if x == 1 else "Gas")
aspiration = st.selectbox("Aspiration", options=[0, 1], format_func=lambda x: "Turbo" if x == 1 else "Standard")
doornumber = st.selectbox("Door Number", options=[0, 1], format_func=lambda x: "Two" if x == 1 else "Four")
carbody = st.selectbox("Car Body", options=[0, 1], format_func=lambda x: "Hatchback" if x == 1 else "Sedan")
drivewheel = st.selectbox("Drive Wheel", options=[0, 1], format_func=lambda x: "FWD" if x == 1 else "RWD")
enginelocation = st.selectbox("Engine Location", options=[0, 1], format_func=lambda x: "Front" if x == 1 else "Rear")
wheelbase = st.number_input("Wheelbase", value=88.6)
carlength = st.number_input("Car Length", value=168.8)
carwidth = st.number_input("Car Width", value=64.1)
carheight = st.number_input("Car Height", value=48.8)
curbweight = st.number_input("Curb Weight", value=2548)
enginetype = st.selectbox("Engine Type", options=[0, 1], format_func=lambda x: "DOHC" if x == 1 else "SOHC")
cylindernumber = st.number_input("Cylinder Number", value=4)
enginesize = st.number_input("Engine Size", value=130)
fuelsystem = st.selectbox("Fuel System", options=[0, 1], format_func=lambda x: "MPFI" if x == 1 else "1BBL")
boreratio = st.number_input("Bore Ratio", value=3.47)
stroke = st.number_input("Stroke", value=2.68)
compressionratio = st.number_input("Compression Ratio", value=9.0)
horsepower = st.number_input("Horsepower", value=111)
peakrpm = st.number_input("Peak RPM", value=5000)
citympg = st.number_input("City MPG", value=21)
highwaympg = st.number_input("Highway MPG", value=27)


# Button for prediction
if st.button("Predict"):
    features = [symboling, CarName, fueltype, aspiration, doornumber, carbody, drivewheel,
                enginelocation, wheelbase, carlength, carwidth, carheight, curbweight,
                enginetype, cylindernumber, enginesize, fuelsystem, boreratio, stroke,
                compressionratio, horsepower, peakrpm, citympg, highwaympg, brand, model_input,
                power_to_weight_ratio, wheelbase_squared, carlength_squared, carwidth_squared,
                carheight_squared, curbweight_squared, enginesize_squared, boreratio_squared,
                stroke_squared, compressionratio_squared, horsepower_squared, peakrpm_squared,
                citympg_squared, highwaympg_squared, log_enginesize]

    predicted_price = predict_price(features)
    st.success(f"The predicted car price is: ${predicted_price:.2f}")
