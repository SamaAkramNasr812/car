# -*- coding: utf-8 -*-
"""Markdown Guide

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/markdown_guide.ipynb
"""
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from joblib import dump, load
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load the dataset
@st.cache_data
def load_data():
    df = pd.read_csv('car_data.csv')  # Replace with your actual CSV file path
    return df

def train_model(df):
    # Ensure 'price' column exists
    if 'price' not in df.columns:
        st.error("The 'price' column is not present in the dataset.")
        return None

    # Identify categorical and numerical columns
    categorical_cols = df.select_dtypes(include=['object', 'string']).columns.tolist()
    numerical_cols = df.select_dtypes(exclude=['object', 'string']).columns.tolist()

    # Create a pipeline for preprocessing
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_cols),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
        ]
    )
    
    # Define features and target
    X = df.drop(columns=["price"])
    y = df["price"]

    # Create and fit the model pipeline
    model = Pipeline(steps=[('preprocessor', preprocessor),
                             ('regressor', LinearRegression())])
    
    model.fit(X, y)
    
    return model

def main():
    st.title("Car Price Prediction App")

    # Load data
    df = load_data()

    # Train model if not already trained
    if 'model' not in st.session_state:
        model = train_model(df)
        if model is not None:  # Only save if model training was successful
            dump(model, 'LinearRegressionModel.joblib')  # Save the model
            st.session_state.model = model
    else:
        model = st.session_state.model

    # User inputs for features using select boxes
    st.sidebar.header("Input Features")
    
    # Select box for car_name
    car_name = st.sidebar.selectbox("Car Name", options=df['CarName'].unique())

    # Numeric inputs
    # ... (other inputs remain unchanged)

    # Button for prediction
    if st.sidebar.button("Predict"):
        features = [symboling, fueltype, aspiration, doornumber, carbody, drivewheel,
                    enginelocation, wheelbase, carlength, carwidth, carheight, curbweight,
                    enginetype, cylindernumber, enginesize, fuelsystem, boreratio, stroke,
                    compressionratio, horsepower, peakrpm, citympg, highwaympg, car_name]

        predicted_price = predict_price(model, features)
        st.success(f"The predicted car price is: ${predicted_price:.2f}")

if __name__ == "__main__":
    main()
