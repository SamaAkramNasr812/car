# -*- coding: utf-8 -*-
"""Markdown Guide

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/markdown_guide.ipynb
"""
import pandas as pd
import numpy as np
import streamlit as st
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from joblib import dump, load

@st.cache_data
def load_data():
    """Load car data from a CSV file."""
    df = pd.read_csv('car_data.csv')  # Replace with your actual CSV file path
    return df

def main():
    """Main function to run the Streamlit app."""
    st.title("Car Price Prediction App")

    # Load data
    df = load_data()

    # User inputs for features
    st.sidebar.header("Input Features")
    
    # Select boxes for categorical features
    CarName = st.sidebar.selectbox("Car Name", options=df['CarName'].unique())
    fueltype = st.sidebar.selectbox("Fuel Type", options=df['fueltype'].unique())
    aspiration = st.sidebar.selectbox("Aspiration", options=df['aspiration'].unique())
    doornumber = st.sidebar.selectbox("Door Number", options=df['doornumber'].unique())
    carbody = st.sidebar.selectbox("Car Body", options=df['carbody'].unique())
    drivewheel = st.sidebar.selectbox("Drive Wheel", options=df['drivewheel'].unique())
    enginelocation = st.sidebar.selectbox("Engine Location", options=df['enginelocation'].unique())
    enginetype = st.sidebar.selectbox("Engine Type", options=df['enginetype'].unique())
    cylindernumber = st.sidebar.selectbox("Cylinder Number", options=df['cylindernumber'].unique())
    fuelsystem = st.sidebar.selectbox("Fuel System", options=df['fuelsystem'].unique())

    # Numeric inputs for car features
    symboling = st.sidebar.number_input("Symboling", min_value=-2, max_value=3, value=3)
    wheelbase = st.sidebar.number_input("Wheelbase", min_value=0.0, value=88.6)
    carlength = st.sidebar.number_input("Car Length", min_value=0.0, value=168.8)
    carwidth = st.sidebar.number_input("Car Width", min_value=0.0, value=64.1)
    carheight = st.sidebar.number_input("Car Height", min_value=0.0, value=48.8)
    curbweight = st.sidebar.number_input("Curb Weight", min_value=0, value=2548)
    enginesize = st.sidebar.number_input("Engine Size", min_value=0, value=130)
    boreratio = st.sidebar.number_input("Bore Ratio", min_value=0.0, value=3.47)
    stroke = st.sidebar.number_input("Stroke", min_value=0.0, value=2.68)
    compressionratio = st.sidebar.number_input("Compression Ratio", min_value=0.0, value=9.0)
    horsepower = st.sidebar.number_input("Horsepower", min_value=0, value=111)
    peakrpm = st.sidebar.number_input("Peak RPM", min_value=0, value=5000)
    citympg = st.sidebar.number_input("City MPG", min_value=0, value=21)
    highwaympg = st.sidebar.number_input("Highway MPG", min_value=0, value=27)

    # Collect features for prediction
    features = [
        symboling, CarName, fueltype, aspiration, doornumber, carbody, drivewheel,
        enginelocation, wheelbase, carlength, carwidth, carheight, curbweight,
        enginetype, cylindernumber, enginesize, fuelsystem, boreratio, stroke,
        compressionratio, horsepower, peakrpm, citympg, highwaympg
    ]

    # Prediction button
    if st.sidebar.button("Predict"):
        # Prepare input data for prediction
        input_data = pd.DataFrame([features], columns=[
            'Symboling',
            'CarName',
            'FuelType',
            'Aspiration',
            'DoorNumber',
            'CarBody',
            'DriveWheel',
            'EngineLocation',
            'Wheelbase',
            'CarLength',
            'CarWidth',
            'CarHeight',
            'CurbWeight',
            'EngineType',
            'CylinderNumber',
            'EngineSize',
            'FuelSystem',
            'BoreRatio',
            'Stroke',
            'CompressionRatio',
            'Horsepower',
            'PeakRPM',
            'CityMPG',
            'HighwayMPG'
        ])

        # One-hot encode the input data for categorical features
        input_data = pd.get_dummies(input_data, drop_first=True)

        # Load the trained model and scaler
        model = load('LinearRegressionModel.joblib')  # Load your trained model
        scaler = load('StandardScalerModel.joblib')  # Load your scaler

        # Ensure input_data has the same columns as your training data
        input_data = input_data.reindex(columns=model.feature_names_in_, fill_value=0)

        # Scale the input data
        input_data_scaled = scaler.transform(input_data)

        # Make predictions
        prediction = model.predict(input_data_scaled)
        st.success(f"The predicted car price is: ${prediction[0]:.2f}")

if __name__ == "__main__":
    main()


