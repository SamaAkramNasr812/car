# -*- coding: utf-8 -*-
"""Markdown Guide

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/markdown_guide.ipynb
"""
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from joblib import dump, load
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

@st.cache_data
def load_data():
    df = pd.read_csv('car_data.csv')  # Replace with your actual CSV file path
    print("DataFrame Columns:", df.columns.tolist())  # Check columns
    return df

def train_model(df):
    # Strip any whitespace from column names
    df.columns = df.columns.str.strip()
    
    # Print column names for debugging
    print("Columns in DataFrame:", df.columns.tolist())
    
    # Check for duplicates
    if df.columns.duplicated().any():
        st.error("There are duplicate column names in the dataset.")
        return None

    # Ensure 'price' column exists
    if 'price' not in df.columns:
        st.error("The 'price' column is not present in the dataset.")
        return None

    # Proceed with feature extraction
    X = df.drop(columns=["price"])
    y = df["price"]

    # Identify categorical and numerical columns
    categorical_cols = X.select_dtypes(include=['object', 'string']).columns.tolist()
    numerical_cols = X.select_dtypes(exclude=['object', 'string']).columns.tolist()

    # Use pd.get_dummies for categorical columns
    X_encoded = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

    # Scale numerical features
    scaler = StandardScaler()
    X_encoded[numerical_cols] = scaler.fit_transform(X_encoded[numerical_cols])

    # Create and fit the model
    model = LinearRegression()
    model.fit(X_encoded, y)
    
    return model


def predict_price(model, features):
    # Convert features to DataFrame
    feature_names = model.get_feature_names_out()  # Get feature names after pd.get_dummies
    
    # Debugging output
    print("Features:", features)
    print("Feature Names:", feature_names)

    # Create a DataFrame for the input features
    input_data = pd.DataFrame([features], columns=feature_names)
    
    # Ensure the input data has the same columns as the training data
    input_data = input_data.reindex(columns=feature_names, fill_value=0)

    return model.predict(input_data)[0]


def main():
    st.title("Car Price Prediction App")

    # Load data
    df = load_data()

    # Train model if not already trained
    if 'model' not in st.session_state:
        model = train_model(df)
        if model is not None:  # Only save if model training was successful
            dump(model, 'LinearRegressionModel.joblib')  # Save the model
            st.session_state.model = model
    else:
        model = st.session_state.model

    # User inputs for features using select boxes
    st.sidebar.header("Input Features")
    
    # Select box for car_name
    car_name = st.sidebar.selectbox("Car Name", options=df['CarName'].unique())
    
    # Numeric inputs (example inputs)
    symboling = st.sidebar.number_input("Symboling", min_value=-2, max_value=3, value=0)
    fueltype = st.sidebar.selectbox("Fuel Type", options=df['fueltype'].unique())
    aspiration = st.sidebar.selectbox("Aspiration", options=df['aspiration'].unique())
    doornumber = st.sidebar.selectbox("Door Number", options=df['doornumber'].unique())
    carbody = st.sidebar.selectbox("Car Body", options=df['carbody'].unique())
    drivewheel = st.sidebar.selectbox("Drive Wheel", options=df['drivewheel'].unique())
    enginelocation = st.sidebar.selectbox("Engine Location", options=df['enginelocation'].unique())
    wheelbase = st.sidebar.number_input("Wheelbase", min_value=0.0, value=0.0)
    carlength = st.sidebar.number_input("Car Length", min_value=0.0, value=0.0)
    carwidth = st.sidebar.number_input("Car Width", min_value=0.0, value=0.0)
    carheight = st.sidebar.number_input("Car Height", min_value=0.0, value=0.0)
    curbweight = st.sidebar.number_input("Curb Weight", min_value=0, value=0)
    enginetype = st.sidebar.selectbox("Engine Type", options=df['enginetype'].unique())
    cylindernumber = st.sidebar.selectbox("Cylinder Number", options=df['cylindernumber'].unique())
    enginesize = st.sidebar.number_input("Engine Size", min_value=0, value=0)
    fuelsystem = st.sidebar.selectbox("Fuel System", options=df['fuelsystem'].unique())
    boreratio = st.sidebar.number_input("Bore Ratio", min_value=0.0, value=0.0)
    stroke = st.sidebar.number_input("Stroke", min_value=0.0, value=0.0)
    compressionratio = st.sidebar.number_input("Compression Ratio", min_value=0.0, value=0.0)
    horsepower = st.sidebar.number_input("Horsepower", min_value=0, value=0)
    peakrpm = st.sidebar.number_input("Peak RPM", min_value=0, value=0)
    citympg = st.sidebar.number_input("City MPG", min_value=0, value=0)
    highwaympg = st.sidebar.number_input("Highway MPG", min_value=0, value=0)

    # Button for prediction
    if st.sidebar.button("Predict"):
        features = [symboling, fueltype, aspiration, doornumber, carbody, drivewheel,
                    enginelocation, wheelbase, carlength, carwidth, carheight, curbweight,
                    enginetype, cylindernumber, enginesize, fuelsystem, boreratio, stroke,
                    compressionratio, horsepower, peakrpm, citympg, highwaympg]

        # Append car_name to features list
        features.append(car_name)

        predicted_price = predict_price(model, features)
        st.success(f"The predicted car price is: ${predicted_price:.2f}")

if __name__ == "__main__":
    main()
