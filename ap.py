# -*- coding: utf-8 -*-
"""Markdown Guide

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/markdown_guide.ipynb
"""
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from joblib import dump, load
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load the dataset
@st.cache_data
def load_data():
    df = pd.read_csv('car_data.csv')  # Replace with your actual CSV file path
    return df

def train_model(df):
    # Identify categorical and numerical columns
    categorical_cols = df.select_dtypes(include=['object', 'string']).columns.tolist()
    numerical_cols = df.select_dtypes(exclude=['object', 'string']).columns.tolist()

    # Create a pipeline for preprocessing
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_cols),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
        ]
    )
    
    # Define features and target
    X = df.drop(columns=["price"])
    y = df["price"]

    # Create and fit the model pipeline
    model = Pipeline(steps=[('preprocessor', preprocessor),
                             ('regressor', LinearRegression())])
    
    model.fit(X, y)
    
    return model

def predict_price(model, input_data):
    # Ensure the input data has the same columns as the training data
    input_data_encoded = pd.DataFrame(input_data, index=[0])  # Ensure it's a DataFrame
    input_data_encoded = input_data_encoded.reindex(columns=model.named_steps['preprocessor'].get_feature_names_out(), fill_value=0)
    
    # Make the prediction
    prediction = model.predict(input_data_encoded)
    return prediction[0]

# Main function
def main():
    st.title("Car Price Prediction App")

    # Load data
    df = load_data()

    # Train model if not already trained
    if 'model' not in st.session_state:
        model = train_model(df)
        dump(model, 'LinearRegressionModel.joblib')  # Save the model
        st.session_state.model = model
    else:
        model = st.session_state.model

    # User inputs for features using select boxes
    st.sidebar.header("Input Features")
    
    # Select box for car_name
    CarName = st.sidebar.selectbox("Car Name", options=df['CarName'].unique())

    # Numeric inputs
    symboling = st.sidebar.number_input("Symboling", value=3, min_value=-2, max_value=3)
    wheelbase = st.sidebar.number_input("Wheelbase", value=88.6, min_value=86.6, max_value=120.9)
    carlength = st.sidebar.number_input("Car Length", value=168.8, min_value=141.1, max_value=208.1)
    carwidth = st.sidebar.number_input("Car Width", value=64.1, min_value=60.3, max_value=72.3)
    carheight = st.sidebar.number_input("Car Height", value=48.8, min_value=47.8, max_value=59.8)
    curbweight = st.sidebar.number_input("Curb Weight", value=2548, min_value=1488, max_value=4066)
    enginesize = st.sidebar.number_input("Engine Size", value=130, min_value=61, max_value=326)
    boreratio = st.sidebar.number_input("Bore Ratio", value=3.47, min_value=2.54, max_value=3.94)
    stroke = st.sidebar.number_input("Stroke", value=2.68, min_value=2.07, max_value=4.17)
    compressionratio = st.sidebar.number_input("Compression Ratio", value=9.0, min_value=7.0, max_value=23.0)
    horsepower = st.sidebar.number_input("Horsepower", value=111, min_value=48, max_value=288)
    peakrpm = st.sidebar.number_input("Peak RPM", value=5000, min_value=4150, max_value=6600)
    citympg = st.sidebar.number_input("City MPG", value=21, min_value=13, max_value=49)
    highwaympg = st.sidebar.number_input("Highway MPG", value=27, min_value=16, max_value=45)

    # Categorical inputs
    fueltype = st.sidebar.selectbox("Fuel Type", options=['gas', 'diesel'])
    aspiration = st.sidebar.selectbox("Aspiration", options=['std', 'turbo'])
    doornumber = st.sidebar.selectbox("Door Number", options=['two', 'four'])
    carbody = st.sidebar.selectbox("Car Body", options=['convertible', 'hatchback', 'sedan', 'wagon', 'hardtop'])
    drivewheel = st.sidebar.selectbox("Drive Wheel", options=['rwd', 'fwd', '4wd'])
    enginelocation = st.sidebar.selectbox("Engine Location", options=['front', 'rear'])
    enginetype = st.sidebar.selectbox("Engine Type", options=['dohc', 'ohcv', 'ohc', 'l', 'rotor', 'ohcf', 'dohcv'])
    cylindernumber = st.sidebar.selectbox("Cylinder Number", options=['four', 'six', 'five', 'three', 'twelve', 'two', 'eight'])
    fuelsystem = st.sidebar.selectbox("Fuel System", options=['mpfi', '2bbl', 'mfi', '1bbl', 'spfi', '4bbl', 'idi', 'spdi'])

    # Button for prediction
    if st.sidebar.button("Predict"):
        features = [symboling, fueltype, aspiration, doornumber, carbody, drivewheel,
                    enginelocation, wheelbase, carlength, carwidth, carheight, curbweight,
                    enginetype, cylindernumber, enginesize, fuelsystem, boreratio, stroke,
                    compressionratio, horsepower, peakrpm, citympg, highwaympg, CarName]

        predicted_price = predict_price(model, features)
        st.success(f"The predicted car price is: ${predicted_price:.2f}")

if __name__ == "__main__":
    main()

